/* eslint-env browser, jquery */
import * as most from 'most';
import marked from './marked';
import { bus } from 'partybus';
import { pathOr } from 'ramda';

//IDEA please convert getTranslatedText && translate to pipes or
//IDEA compositions with Rambda.js
//IDEA http://randycoulman.com/blog/2016/06/07/thinking-in-ramda-partial-application/
const translations = {};
// when each translation is prefetched, store them in the translations object
bus.on('translation::loaded', ({ locale, json }) => {
  translations[locale] = json;
});

let current_locale = '';
const setLocale = new_locale => current_locale = new_locale;
const getLocale = () => current_locale;

const getTranslatedText = (locale_json, key = '') =>
  pathOr('Lorem Ipsum', key.split('.'), locale_json);

const translate = element => {
  const $el = $(element);
  const locale = translations[current_locale];
  if (locale === undefined) {
    return; // we are running too early before languages are setup
  }
  const translatedText = getTranslatedText(
    locale,
    element.getAttribute('data-i18n')
  );
  if (translatedText !== undefined) {
    element.innerHTML = marked(translatedText);
    element.setAttribute('translated', locale);
  } else {
    console.error(
      'translation failed',
      element,
      current_locale,
      locale,
      element.getAttribute('data-i18n'),
      translatedText
    );
  }
};

most
  .fromEvent('i18n::translateable', bus)
  .flatMap(elementArray => most.from(elementArray))
  .tap(translate)
  .drain();

export { setLocale, getLocale, translations };
