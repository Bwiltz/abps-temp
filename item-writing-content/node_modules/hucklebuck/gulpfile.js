/* eslint-disable */
const watchify = require('watchify');
const browserify = require('browserify');
const gulp = require('gulp');
const plumber = require('gulp-plumber');
const uglify = require('gulp-uglify');
const rename = require('gulp-rename');
const source = require('vinyl-source-stream');
const buffer = require('vinyl-buffer');
const gutil = require('gulp-util');
const size = require('gulp-size');
const htmlreplace = require('gulp-html-replace');
const htmlmin = require('gulp-htmlmin');
const sourcemaps = require('gulp-sourcemaps');
const babelify = require('babelify');
// eslint-disable-line
const assign = require('lodash.assign');
const postcss = require('gulp-postcss');
const browserSync = require('browser-sync');
const exec = require('child_process').exec;

const distpath = 'examples';

const customOpts = {
  entries: [ './example.js' ],
  debug: true,
  transform: [
    [ 'babelify', { presets: [ 'es2015' ], ignore: [ './src/libs/**' ] } ]
  ]
};
const opts = assign({}, watchify.args, customOpts);
const app_js = watchify(browserify(opts));
app_js.on('log', gutil.log);

const shell = function(command_str, cb) {
  exec(command_str, function(err, stdout, stderr) {
    console.log(stdout);
    console.log(stderr);
    cb(err);
  });
};

gulp.task('wat', function(cb) {
  shell('echo "WAT"', cb);
});

/**
 * This task will bundle all other js files and babelify them.
 * If you want to add other processing to the main js files, add your code here.
 */
gulp.task('bundle', [ 'wat' ], function() {
  return app_js.bundle().on('error', function(err) {
    console.log(err.message);
    browserSync.notify(err.message, 3000);
    this.emit('end');
  }).pipe(
    plumber()
  ).pipe(source('app.js')).pipe(buffer()).pipe(gulp.dest(distpath));
});

gulp.task('watch', [ 'bundle' ], function() {
  const watcher = gulp.watch('./src/**/*', [ 'refresh' ]);
  watcher.on('change', function(event) {
    console.log(
      'File ' + event.path + ' was ' + event.type + ', running tasks...'
    );
  });
});

gulp.task('browser-sync', [ 'watch' ], function() {
  return browserSync({ server: { baseDir: distpath }, port: 8888 });
});

gulp.task('default', [ 'browser-sync' ]);

/**
 * Using a dependency ensures that the bundle task is finished before reloading.
 */
gulp.task('refresh', [ 'bundle' ], browserSync.reload);
